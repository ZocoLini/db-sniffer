name: Rust CI/CD Pipeline

on:
  push:
    branches: [master, test-actions*]
    tags:
      - 'v*'
  pull_request:
    branches:
      - master
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install Docker Compose y Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          sudo apt-get install -y maven

      - name: Run unit tests
        run: cargo test --lib

      - name: Run integration tests
        run: cargo test --test '*'
        env:
          TEST_DIR: $RUNNER_TEMP
          DOCKER_BUILDKIT: 1

  build:
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build release
        run: cargo build --release --bin cli

      - name: Prepare artifact (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: mv target/release/cli target/release/sniffer-linux

      - name: Prepare artifact (macOS)
        if: matrix.os == 'macos-latest'
        run: mv target/release/cli target/release/sniffer-macos

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: mv .\target\release\cli.exe .\target\release\sniffer-windows.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: sniffer-${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'windows-latest' && 'windows' || 'macos' }}
          path: >
            ${{ 
              matrix.os == 'ubuntu-latest' && 'target/release/sniffer-linux' || 
              matrix.os == 'windows-latest' && 'target/release/sniffer-windows.exe' || 
              'target/release/sniffer-macos' 
            }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server (placeholder)
        run: |
          echo "Deploying build to production server"

  create-release:
      permissions:
        contents: write
      needs: build
      if: startsWith(github.ref, 'refs/tags/v')
      runs-on: ubuntu-latest

      steps:
        - name: Download all artifacts
          uses: actions/download-artifact@v4
          with:
            path: ./downloads

        - name: Create GitHub Release
          uses: softprops/action-gh-release@v2
          with:
            tag_name: ${{ github.ref }}
            files: ./downloads/**/*
            body: 'Release ${{ github.ref_name }}'
            draft: false
            prerelease: false
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}