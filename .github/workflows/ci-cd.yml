name: Rust CI/CD Pipeline

on:
  push:
    branches: [master, test-actions*]
  pull_request:
    branches:
      - master

jobs:
  # 1. CI: Ejecutar tests en Ubuntu
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2

      - name: Install Docker Compose y Maven
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          sudo apt-get install -y maven

      - name: Run unit tests
        run: cargo test --lib

      - name: Run integration tests
        run: cargo test --test '*'
        env:
          TEST_DIR: $RUNNER_TEMP
          DOCKER_BUILDKIT: 1

  # 2. CD: Compilaci√≥n para Windows y Linux
  build:
    needs: test
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Build release for ${{ matrix.os }}
        run: |
          cargo build --release --bin cli
          mv target/release/cli target/release/sniffer

      - name: Upload artifact for ${{ matrix.os }}
        uses: actions/upload-artifact@v4
        with:
          name: db-sniffer-${{ matrix.os }}
          path: target/release/sniffer

  # 3. CD: Despliegue (Ejemplo simple de despliegue)
  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to server (placeholder)
        run: |
          echo "Deploying build to production server"